asect 0x00

### Функция вызвается тогда, когда игра уже окончена. Она перекладывает
### все камни, оставшиеся в лунках в манкалу соответствующего игрока
macro TRANSFER_TO_MANCALA/2
	ldi r0, $1
	ldi r1, 0x00
	move r1, r3
	ldi r2, $2
	while 
		cmp r2, r0
	stays gt
		push r2
		ld r0, r2
		add r2, r1
		st r0, r3
		inc r0
		pop r2
	wend 
	ld r0, r2
	add r1, r2
	st r0, r2
mend 


MAIN:
	## проверка инициализировано ли игровое поле?	
	ldv 0x10, r0 
	if 
		tst r0
	is z                 #случай, когда память не инициализирована
		jsr INIT_FIELDS
		jsr INIT_MOVE
		ldi r0, 0x10
		ldi r1, 0x01
		st r0, r1        #отмечаем, что мы инициализировали память
	fi
	
	## проверка окончания игры (у кого-то кончились камни)
	ldv 0x13, r0          #посмотрим чей сейчас ход (1 - AI ...)
	if
		dec r0
	is z                  #загружаем спец.значение - чьи лунки проверяем на пустоту
		ldv 0x16, r0      
	else 
		ldv 0x17, r0
	fi
	
	if 
		tst r0
	is nz 
		ldi r0, 0x12
		ldi r1, 0b01000000  #оставляем спец. сообщение, что игра кончилась
		st r0, r1
		TRANSFER_TO_MANCALA 0x01, 0x07
		TRANSFER_TO_MANCALA 0x09, 0x0F
		halt
	fi 
br BANK_SWITCH


### Это вспомогательная функция, предназначенная для реагирования на выбор игрока.
### В начале своей работы она оставляет сообщение в игре о том, что ожидает
### выбор настроек игры от пользователя. Далее она запускает цикл, работающий
### пока пользователь в игре не нажмет на кнопку (т.е. пока не будет сделан хвыбор).
### По завершении цикла, функция оставит сообщение в игре для специального регистра,
### о том что данные нужно очистить. Затем функция прекращает посылать
### сообщения в игру и заканчивает свою работу.
INPUT_REGISTER:
	ldi r2, 0x12
	ldi r3, 0b00000100  #даём сигнал в схему о том, что ждем выбора от пользователя
	st r2, r3
    
    ## задаем цикл проверки состояния ячейки памяти, адрес кооторой лежит в r0
	do             #туда должно поступить какое-то начальное значение 
		ld r0, r1  #цикл будет идти бесконечно пока user не нажмет на кнопку
		tst r1     #на схеме и значение не запишется в регистр и сохранится в нём
	until gt       
	ldi r3, 0x00        #когда получили значение, перестаем подавать сигнал 
	st r2, r3
rts


### Функция для инициализации стартового кол-ва камней во всех лунках
###	(построение стартовой позиции на основе выбора игрока)
INIT_FIELDS:  
	ldi r0, 0x00      #будто записываем в ячейку памяти 0x00 кол-во камней
	jsr INPUT_REGISTER            
	ldi r0, 0x01      #номер ячейки памяти, куда будет идти запись
	ldi r2, 0x0C      #кол-во ячеек, в которые будет идти запись

	ldi r3, 0x07      #ячейка, которую мы должны пропустить при заполнении
	while             #(*это делается ради симметрии)
		tst r2        #цикл по заполнению лунок камнями (в манкалах - нет камней)
	stays gt          
		if  
			cmp r0, r3
		is ne
			st r0, r1
			dec r2
		else 
			inc r0      #если адрес текущей ячейки равен 0x07 мы должны пропустить 
		fi              #ещё и ячейку с номером 8 (7-я ячейка - это манкала)
		inc r0          #у нас получается двойное инкрементирование - две пропущ ячейки
	wend     
rts


### Функция для определиния того, кто из соперников будте ходить первым
### (инициализация первого хода на основе выбора пользователя)
INIT_MOVE:
	ldi r0, 0x08        #будто записываем в ячейку 0x08, кто ходит первым (1 - AI, 2 - U)
	jsr INPUT_REGISTER  #в r1 сохранится сигнальное значение 
	ldi r0, 0x13        #сохраняем его по адресу 0x13
	st r0, r1
rts


### Инструкция [asect] используется для указания того, с какого места в памяти ROM
### должны быть сохранены инструкции нижеследующего хода. Мы сохраняем инструкции 
### функции по переключению с одного банка памяти на другой в самом конце памяти, 
### чтобы в Logisim-части происходило безопасное переключение с одного банка памяти 
### на другой. (*Это связано с тем как работает Cdm-8 в Logisim)
asect 0xF9            #сохраняем эту функцию в самом конце памяти, чтобы после 
BANK_SWITCH:          #ее выполнения счетчик PC обновился на 0 (команды будут выполняться с начала)
	ldv 0x13, r1
	ldi r0, 0x11
	st r0, r1         #переключилсиь на банк памяти PLAYER-а чей сейчас ход
end
